// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/03/2018 13:07:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          diagrama_de_blocos_relogio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module diagrama_de_blocos_relogio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
// wires                                               
wire comp_out_DH;
wire comp_out_DM;
wire comp_out_DS;
wire comp_out_UH;
wire comp_out_UM;
wire comp_out_US;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire [3:0] out_mux_reg;
wire [3:0] out_ula;
wire [12:0] palavra_out;
wire [3:0] reg_dh;
wire reg_DH_enable;
wire [3:0] reg_dm;
wire reg_DM_enable;
wire [3:0] reg_ds;
wire reg_DS_enable;
wire [3:0] reg_uh;
wire reg_UH_enable;
wire [3:0] reg_um;
wire reg_UM_enable;
wire [3:0] reg_us;
wire reg_US_enable;

// assign statements (if any)                          
diagrama_de_blocos_relogio i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.comp_out_DH(comp_out_DH),
	.comp_out_DM(comp_out_DM),
	.comp_out_DS(comp_out_DS),
	.comp_out_UH(comp_out_UH),
	.comp_out_UM(comp_out_UM),
	.comp_out_US(comp_out_US),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.out_mux_reg(out_mux_reg),
	.out_ula(out_ula),
	.palavra_out(palavra_out),
	.reg_dh(reg_dh),
	.reg_DH_enable(reg_DH_enable),
	.reg_dm(reg_dm),
	.reg_DM_enable(reg_DM_enable),
	.reg_ds(reg_ds),
	.reg_DS_enable(reg_DS_enable),
	.reg_uh(reg_uh),
	.reg_UH_enable(reg_UH_enable),
	.reg_um(reg_um),
	.reg_UM_enable(reg_UM_enable),
	.reg_us(reg_us),
	.reg_US_enable(reg_US_enable)
);
initial 
begin 
#10000000 $finish;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #5000 1'b1;
	#5000;
end 
endmodule

