// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/27/2018 12:58:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          diagrama_de_blocos_relogio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module diagrama_de_blocos_relogio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [4:0] v_2;
reg [4:0] v_4;
reg [4:0] v_6;
reg [4:0] v_9;
reg v_10;
reg v_11;
reg v_12;
reg v_13;
reg v_14;
reg v_100;
reg v_101;
reg v_102;
reg v_103;
reg v_104;
// wires                                               
wire [4:0] out_mux_reg;
wire [4:0] out_ula;
wire [4:0] reg_us;
wire reg_US_enable;

// assign statements (if any)                          
diagrama_de_blocos_relogio i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.out_mux_reg(out_mux_reg),
	.out_ula(out_ula),
	.reg_us(reg_us),
	.reg_US_enable(reg_US_enable),
	.v_2(v_2),
	.v_4(v_4),
	.v_6(v_6),
	.v_9(v_9),
	.v_10(v_10),
	.v_11(v_11),
	.v_12(v_12),
	.v_13(v_13),
	.v_14(v_14),
	.v_100(v_100),
	.v_101(v_101),
	.v_102(v_102),
	.v_103(v_103),
	.v_104(v_104)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// v_2[ 4 ]
initial
begin
	v_2[4] = 1'b0;
end 
// v_2[ 3 ]
initial
begin
	v_2[3] = 1'b0;
end 
// v_2[ 2 ]
initial
begin
	v_2[2] = 1'b0;
end 
// v_2[ 1 ]
initial
begin
	v_2[1] = 1'b1;
end 
// v_2[ 0 ]
initial
begin
	v_2[0] = 1'b0;
end 
// v_4[ 4 ]
initial
begin
	v_4[4] = 1'b0;
end 
// v_4[ 3 ]
initial
begin
	v_4[3] = 1'b0;
end 
// v_4[ 2 ]
initial
begin
	v_4[2] = 1'b1;
end 
// v_4[ 1 ]
initial
begin
	v_4[1] = 1'b0;
end 
// v_4[ 0 ]
initial
begin
	v_4[0] = 1'b0;
end 
// v_6[ 4 ]
initial
begin
	v_6[4] = 1'b0;
end 
// v_6[ 3 ]
initial
begin
	v_6[3] = 1'b0;
end 
// v_6[ 2 ]
initial
begin
	v_6[2] = 1'b1;
end 
// v_6[ 1 ]
initial
begin
	v_6[1] = 1'b1;
end 
// v_6[ 0 ]
initial
begin
	v_6[0] = 1'b0;
end 
// v_9[ 4 ]
initial
begin
	v_9[4] = 1'b0;
end 
// v_9[ 3 ]
initial
begin
	v_9[3] = 1'b1;
end 
// v_9[ 2 ]
initial
begin
	v_9[2] = 1'b0;
end 
// v_9[ 1 ]
initial
begin
	v_9[1] = 1'b0;
end 
// v_9[ 0 ]
initial
begin
	v_9[0] = 1'b1;
end 

// v_10
initial
begin
	v_10 = 1'b1;
end 

// v_11
initial
begin
	v_11 = 1'b0;
end 

// v_12
initial
begin
	v_12 = 1'b0;
end 

// v_13
initial
begin
	v_13 = 1'b0;
end 

// v_14
initial
begin
	v_14 = 1'b0;
end 

// v_100
initial
begin
	v_100 = 1'b0;
end 

// v_101
initial
begin
	v_101 = 1'b0;
end 

// v_102
initial
begin
	v_102 = 1'b0;
end 

// v_103
initial
begin
	v_103 = 1'b0;
end 

// v_104
initial
begin
	v_104 = 1'b0;
end 
endmodule

