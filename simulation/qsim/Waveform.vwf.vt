// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/16/2018 21:10:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          diagrama_de_blocos_relogio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module diagrama_de_blocos_relogio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [3:0] mux_abs_control;
reg [3:0] mux_reg_control;
reg reg_us_enable;
reg reg_us_reset;
reg [1:0] ula_control;
reg [4:0] v_1;
// wires                                               
wire [4:0] out_mux_reg;
wire [4:0] out_ula;
wire [4:0] reg_us;

// assign statements (if any)                          
diagrama_de_blocos_relogio i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.mux_abs_control(mux_abs_control),
	.mux_reg_control(mux_reg_control),
	.out_mux_reg(out_mux_reg),
	.out_ula(out_ula),
	.reg_us(reg_us),
	.reg_us_enable(reg_us_enable),
	.reg_us_reset(reg_us_reset),
	.ula_control(ula_control),
	.v_1(v_1)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// mux_abs_control[ 3 ]
initial
begin
	mux_abs_control[3] = 1'b0;
end 
// mux_abs_control[ 2 ]
initial
begin
	mux_abs_control[2] = 1'b0;
end 
// mux_abs_control[ 1 ]
initial
begin
	mux_abs_control[1] = 1'b0;
end 
// mux_abs_control[ 0 ]
initial
begin
	mux_abs_control[0] = 1'b0;
end 
// mux_reg_control[ 3 ]
initial
begin
	mux_reg_control[3] = 1'b0;
end 
// mux_reg_control[ 2 ]
initial
begin
	mux_reg_control[2] = 1'b0;
end 
// mux_reg_control[ 1 ]
initial
begin
	mux_reg_control[1] = 1'b0;
end 
// mux_reg_control[ 0 ]
initial
begin
	mux_reg_control[0] = 1'b0;
end 

// reg_us_enable
initial
begin
	reg_us_enable = 1'b1;
end 

// reg_us_reset
initial
begin
	reg_us_reset = 1'b1;
end 
// ula_control[ 1 ]
initial
begin
	ula_control[1] = 1'b0;
end 
// ula_control[ 0 ]
initial
begin
	ula_control[0] = 1'b0;
end 
// v_1[ 4 ]
initial
begin
	v_1[4] = 1'b0;
end 
// v_1[ 3 ]
initial
begin
	v_1[3] = 1'b0;
end 
// v_1[ 2 ]
initial
begin
	v_1[2] = 1'b0;
end 
// v_1[ 1 ]
initial
begin
	v_1[1] = 1'b0;
end 
// v_1[ 0 ]
initial
begin
	v_1[0] = 1'b1;
end 
endmodule

